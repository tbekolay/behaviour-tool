/* CODE GENERATED BY BEHAVIOUR TOOL
Don't delete this comment block! You can, however, modify the elements.  Changes will show up when you reload the file.
BEHAVIOUR: Fight
VERB1: Instigate FaceAndSayLine Follower 
    VERB1_PRECONDITIONS: GetDist(1, 3) > 5
    VERB1_FOLLOWERS: Fight 
    VERB1_VERBDATA: oVictim GetFirstPC() 
    VERB1_ARGUMENTS: "You suck!"
VERB2: Fight Fight Supporter Terminal
    VERB2_VERBDATA: oVictim GetFirstPC() 
VERB3: New_Verb SayLine Follower 
    VERB3_FOLLOWERS: Fight New_Verb Instigate 
    VERB3_VERBDATA: oVictim 
    VERB3_ARGUMENTS: "Whoa"
ACTOR1: object oVictim Victim
VARIABLE1: string sConv Conv File
 */
        
#include "util_bintarray"
#include "util_behaviour"
#include "util_verbs"

/////////// Constants ///////////
const int F_FI_INSTIGATE = 2
const int S_FI_FIGHT = 3
const int F_FI_NEW_VERB = 6

/////////// Declarations ///////////

// Initializes the Fight behaviour.
//  oVictim - Victim
//  sConv - Conv File
int start_Fight(int iTimeout, int iInterrupt, object oVictim, string sConv);
void checkcues_Fight(int iTimeout, int iBehaviour);
void control_Fight(int iBehaviour, int iVerb);
void cleanup_Fight(int iBehaviour);
void timeout_Fight(int iBehaviour);
void segue_Fight(int iBehaviour);

/////////// Implementations ///////////

int start_Fight(int iTimeout, int iInterrupt, object oVictim, string sConv)
{
    // Make sure we have have what we need to start the behaviour.
    if (oVictim != OBJECT_INVALID && sConv != "")
    {
        object oFight = createBehaviourObject();
        int iID = GetLocalInt(oFight, "ID");

        // Check out our actors.
        if (b_Checkout(oVictim, iID, iInterrupt))
        {
            // Set necessary parameters on the behaviour object.
            SetLocalObject(oFight, "oVictim", oVictim);
            SetLocalString(oFight, "sConv", sConv);
            SetLocalInt   (oFight, "iInterrupt", iInterrupt);
            SetLocalString(oFight, "sScript", "z_b_fight");

            // Set up the cue array and add the first step to it.
            intarrayNew(oFight, "cues");
            addCue(iID, F_FI_INSTIGATE);

            checkcues_Fight(iTimeout, iID);

            return iID;
        }
    }

    return FALSE;
}

void checkcues_Fight(int iTimeout, int iBehaviour)
{
    // Get the actors and other variables from the behaviour object.
    object oVictim = GetLocalObject(oFight, "oVictim");
    string sConv = GetLocalString(oFight, "sConv");

    // Are we finished?
    if (getBehaviourFinished(iBehaviour))
    {
        cleanup_Fight(iBehaviour);
        return;
    }

    // Check to see if we want to segue before we check if we're paused.
    if (getSegueToBehaviour(iBehaviour))
    {
        segue_Fight(iBehaviour);
        setSegueToBehaviour(iBehaviour, FALSE);
        setBehaviourPaused(iBehaviour, FALSE);
        DelayCommand(2*DEFAULT_HEARTBEAT_DELAY, checkcues_Fight(iTimeout, iBehaviour));
        return;
    }

    // If we're paused, we'll just idle (no need to check as often as usual).
    if (getBehaviourPaused(iBehaviour))
    {
        DebugPrint("Fight paused...");
        DelayCommand(4*DEFAULT_HEARTBEAT_DELAY, checkcues_Fight(iTimeout, iBehaviour));
        return;
    }

    // Have we timed out?
    if (!iTimeout)
    {
        timeout_Fight(iBehaviour);
        DelayCommand(DEFAULT_HEARTBEAT_DELAY, checkcues_Fight(iTimeout, iBehaviour));
        return;
    }

    // Run through each cue and see if any of them fire
    int c_ix, c_max, iVerb;

    c_max = getNumCues(iBehaviour);

    for (c_ix = 0; c_ix < c_max; c_ix++)
    {
        iVerb = getNextCue(iBehaviour);
        DebugPrint("Checking verb " + IntToString(iVerb));

        switch (iVerb)
        {
        case F_FI_INSTIGATE:
            if (GetDist(1, 3) > 5)
            {
                FaceAndSayLine (VerbData(iVerb, iBehaviour, oVictim, GetFirstPC()), "You suck!");
                clearFollowerCues(iBehaviour);
                c_max = getNumCues(iBehaviour);
            }
            break;
        case S_FI_FIGHT:
            {
                Fight (VerbData(iVerb, iBehaviour, oVictim, GetFirstPC()));
                removeCue(iBehaviour, S_FI_FIGHT);
                c_max = getNumCues(iBehaviour);
            }
            break;
        case F_FI_NEW_VERB:
            {
                SayLine (VerbData(iVerb, iBehaviour, oVictim), "Whoa");
                clearFollowerCues(iBehaviour);
                c_max = getNumCues(iBehaviour);
            }
            break;
        }
    }

    DelayCommand(DEFAULT_HEARTBEAT_DELAY, checkcues_Fight(iTimeout-1, iBehaviour));

    DebugPrint("Fight " + IntToString(iBehaviour) + " tick...");
}

void control_Fight(int iBehaviour, int iVerb)
{
    // Get the actors and other variables from the behaviour object.
    object oVictim = GetLocalObject(oFight, "oVictim");
    string sConv = GetLocalString(oFight, "sConv");

    switch (iVerb)
    {
    case F_FI_INSTIGATE:
        addCue(iBehaviour, S_FI_FIGHT);
        break;
    case S_FI_FIGHT:
        setBehaviourFinished(iBehaviour);
        break;
    case F_FI_NEW_VERB:
        addCue(iBehaviour, S_FI_FIGHT);
        addCue(iBehaviour, F_FI_NEW_VERB);
        addCue(iBehaviour, F_FI_INSTIGATE);
        break;
    }
}

void cleanup_Fight(int iBehaviour)
{
    // Get the actors and other variables from the behaviour object.
    object oVictim = GetLocalObject(oFight, "oVictim");
    string sConv = GetLocalString(oFight, "sConv");
    int iInterrupt = GetLocalInt(oFight, "iInterrupt");

    // If we paused behaviours, we'll segue back into them.
    if (iInterrupt == INTERRUPT_PAUSE)
    {
        int iPrevious;
        
        iPrevious = b_GetPausedBehaviour(oVictim);
        if (iPrevious)
        {
            setSegueToBehaviour(iPrevious, TRUE);
        }
    }

    b_Checkin(oVictim);
    destroyBehaviourObject(iBehaviour);
}

void timeout_Fight(int iBehaviour)
{
    // Get the actors and other variables from the behaviour object.
    object oVictim = GetLocalObject(oFight, "oVictim");
    string sConv = GetLocalString(oFight, "sConv");

    // Insert timeout handling code here

    setBehaviourFinished(iBehaviour);
}

void segue_Fight(int iBehaviour)
{
    // Get the actors and other variables from the behaviour object.
    object oVictim = GetLocalObject(oFight, "oVictim");
    string sConv = GetLocalString(oFight, "sConv");

    // Insert segue handling code here
}
